-- GENERATED by C->Haskell Compiler, version 0.28.5 Switcheroo, 25 November 2017 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "RControlStationComm.chs" #-}

module RISE.SDVP.Internal.RControllStationComm
  ( rcscConnectTcp,
    rcscDisconnectTcp,
    rcscSetDebugLevel,
    rcscHasError,
    rcscLastError,
    rcscClearRoute,
    rcscSetAutopilotActive,
    rcscRcControl ) where 
import qualified Foreign.C.String as C2HSImp
import qualified Foreign.C.Types as C2HSImp
import qualified Foreign.Marshal.Utils as C2HSImp
import qualified Foreign.Ptr as C2HSImp


    
   


rcscConnectTcp :: (String) -> (Int) -> IO ((Bool))
rcscConnectTcp a1 a2 =
  C2HSImp.withCString a1 $ \a1' -> 
  let {a2' = fromIntegral a2} in 
  rcscConnectTcp'_ a1' a2' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
 

rcscDisconnectTcp :: IO ()
rcscDisconnectTcp =
  rcscDisconnectTcp'_ >>
  return ()

{-# LINE 17 "RControlStationComm.chs" #-}


rcscSetDebugLevel :: (Int) -> IO ()
rcscSetDebugLevel a1 =
  let {a1' = fromIntegral a1} in 
  rcscSetDebugLevel'_ a1' >>
  return ()

{-# LINE 19 "RControlStationComm.chs" #-}


rcscHasError :: IO ((Bool))
rcscHasError =
  rcscHasError'_ >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 21 "RControlStationComm.chs" #-}


rcscLastError :: IO ((String))
rcscLastError =
  rcscLastError'_ >>= \res ->
  C2HSImp.peekCString res >>= \res' ->
  return (res')

{-# LINE 23 "RControlStationComm.chs" #-}


{-
bool rcsc_getState(int car, CAR_STATE *state, int timeoutMs);
bool rcsc_getEnuRef(int car, bool fromMap, double *llh, int timeoutMs);
bool rcsc_setEnuRef(int car, double *llh, int timeoutMs);
bool rcsc_addRoutePoints(int car, ROUTE_POINT *route, int len,
                         bool replace, bool mapOnly,
                         int mapRoute, int timeoutMs);
-}

rcscClearRoute :: (Int) -> (Int) -> (Int) -> IO ((Bool))
rcscClearRoute a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  rcscClearRoute'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
 

rcscSetAutopilotActive :: (Int) -> (Bool) -> (Int) -> IO ((Bool))
rcscSetAutopilotActive a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  let {a2' = C2HSImp.fromBool a2} in 
  let {a3' = fromIntegral a3} in 
  rcscSetAutopilotActive'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
  

rcscRcControl :: (Int) -> (Int) -> (Double) -> (Double) -> IO ((Bool))
rcscRcControl a1 a2 a3 a4 =
  let {a1' = fromIntegral a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = realToFrac a3} in 
  let {a4' = realToFrac a4} in 
  rcscRcControl'_ a1' a2' a3' a4' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 38 "RControlStationComm.chs" #-}


{- 
bool rcsc_getRoutePoints(int car, ROUTE_POINT *route, int *len,
                         int maxLen, int mapRoute, int timeoutMs);
bool rcsc_sendTerminalCmd(int car, char *cmd, char *reply, int timeoutMs);
-} 

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_connectTcp"
  rcscConnectTcp'_ :: ((C2HSImp.Ptr C2HSImp.CChar) -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-})))

foreign import ccall safe "RControlStationComm.chs.h rcsc_disconnectTcp"
  rcscDisconnectTcp'_ :: (IO ())

foreign import ccall safe "RControlStationComm.chs.h rcsc_setDebugLevel"
  rcscSetDebugLevel'_ :: (C2HSImp.CInt -> (IO ()))

foreign import ccall safe "RControlStationComm.chs.h rcsc_hasError"
  rcscHasError'_ :: (IO C2HSImp.CInt{-bool-})

foreign import ccall safe "RControlStationComm.chs.h rcsc_lastError"
  rcscLastError'_ :: (IO (C2HSImp.Ptr C2HSImp.CChar))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_clearRoute"
  rcscClearRoute'_ :: (C2HSImp.CInt -> (C2HSImp.CInt -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_setAutopilotActive"
  rcscSetAutopilotActive'_ :: (C2HSImp.CInt -> (C2HSImp.CInt{-bool-} -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_rcControl"
  rcscRcControl'_ :: (C2HSImp.CInt -> (C2HSImp.CInt -> (C2HSImp.CDouble -> (C2HSImp.CDouble -> (IO C2HSImp.CInt{-bool-})))))
