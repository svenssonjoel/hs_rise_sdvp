-- GENERATED by C->Haskell Compiler, version 0.28.3 Switcheroo, 25 November 2017 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "RControlStationComm.chs" #-}

module RISE.SDVP.Internal.RControllStationComm
  ( rcscConnectTcp,
    rcscDisconnectTcp,
    rcscSetDebugLevel,
    rcscHasError,
    rcscLastError,
    rcscClearRoute,
    rcscSetAutopilotActive,
    rcscRcControl ) where 
import qualified Foreign.C.String as C2HSImp
import qualified Foreign.C.Types as C2HSImp
import qualified Foreign.Marshal.Utils as C2HSImp
import qualified Foreign.Ptr as C2HSImp



-- import RISE.SDVP.Internal.CarState 
import Foreign.Ptr
import Foreign.Marshal.Array

import Data.Word
import Data.Int



-- Marshalling 
alloc3 = allocaArray 3

peek3Double d =
  do l <- peekArray 3 d
     return (map realToFrac l) 

withDoubleArray dat f = withArray (map realToFrac dat :: [C2HSImp.CDouble]) f 
  
-- C Bindings 
rcscConnectTcp :: (String) -> (Int) -> IO ((Bool))
rcscConnectTcp a1 a2 =
  C2HSImp.withCString a1 $ \a1' -> 
  let {a2' = fromIntegral a2} in 
  rcscConnectTcp'_ a1' a2' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
 

rcscDisconnectTcp :: IO ()
rcscDisconnectTcp =
  rcscDisconnectTcp'_ >>
  return ()

{-# LINE 33 "RControlStationComm.chs" #-}


rcscSetDebugLevel :: (Int) -> IO ()
rcscSetDebugLevel a1 =
  let {a1' = fromIntegral a1} in 
  rcscSetDebugLevel'_ a1' >>
  return ()

{-# LINE 35 "RControlStationComm.chs" #-}


rcscHasError :: IO ((Bool))
rcscHasError =
  rcscHasError'_ >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 37 "RControlStationComm.chs" #-}


rcscLastError :: IO ((String))
rcscLastError =
  rcscLastError'_ >>= \res ->
  C2HSImp.peekCString res >>= \res' ->
  return (res')

{-# LINE 39 "RControlStationComm.chs" #-}


-- Assumes (for now) the Ptr is allocated and has enough room for a CAR_STATE
rcscGetState :: (Int) -> (Ptr ()) -> (Int) -> IO ((Bool))
rcscGetState a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  let {a2' = id a2} in 
  let {a3' = fromIntegral a3} in 
  rcscGetState'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 42 "RControlStationComm.chs" #-}


-- Assumes that the memory Ptr points to contains enough doubles
-- TODO: FIX!
rcscGetEnuRef :: (Int) -> (Bool) -> (Int) -> IO ((Bool), ([Double]))
rcscGetEnuRef a1 a2 a4 =
  let {a1' = fromIntegral a1} in 
  let {a2' = C2HSImp.fromBool a2} in 
  alloc3 $ \a3' -> 
  let {a4' = fromIntegral a4} in 
  rcscGetEnuRef'_ a1' a2' a3' a4' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  peek3Double  a3'>>= \a3'' -> 
  return (res', a3'')

{-# LINE 46 "RControlStationComm.chs" #-}


-- TODO: FIX!
rcscSetEnuRef :: (Int) -> ([Double]) -> (Int) -> IO ((Bool))
rcscSetEnuRef a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  withDoubleArray a2 $ \a2' -> 
  let {a3' = fromIntegral a3} in 
  rcscSetEnuRef'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 49 "RControlStationComm.chs" #-}


-- TODO: FIX! 
rcscAddRoutePoints :: (Int) -> (Ptr ()) -> (Int) -> (Bool) -> (Bool) -> (Int) -> (Int) -> IO ((Bool))
rcscAddRoutePoints a1 a2 a3 a4 a5 a6 a7 =
  let {a1' = fromIntegral a1} in 
  let {a2' = id a2} in 
  let {a3' = fromIntegral a3} in 
  let {a4' = C2HSImp.fromBool a4} in 
  let {a5' = C2HSImp.fromBool a5} in 
  let {a6' = fromIntegral a6} in 
  let {a7' = fromIntegral a7} in 
  rcscAddRoutePoints'_ a1' a2' a3' a4' a5' a6' a7' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 52 "RControlStationComm.chs" #-}

--                                car      RPs       len    replace  mapOnly  mapRoute  timeout

rcscClearRoute :: (Int) -> (Int) -> (Int) -> IO ((Bool))
rcscClearRoute a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = fromIntegral a3} in 
  rcscClearRoute'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
 

rcscSetAutopilotActive :: (Int) -> (Bool) -> (Int) -> IO ((Bool))
rcscSetAutopilotActive a1 a2 a3 =
  let {a1' = fromIntegral a1} in 
  let {a2' = C2HSImp.fromBool a2} in 
  let {a3' = fromIntegral a3} in 
  rcscSetAutopilotActive'_ a1' a2' a3' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')
  

rcscRcControl :: (Int) -> (Int) -> (Double) -> (Double) -> IO ((Bool))
rcscRcControl a1 a2 a3 a4 =
  let {a1' = fromIntegral a1} in 
  let {a2' = fromIntegral a2} in 
  let {a3' = realToFrac a3} in 
  let {a4' = realToFrac a4} in 
  rcscRcControl'_ a1' a2' a3' a4' >>= \res ->
  let {res' = C2HSImp.toBool res} in
  return (res')

{-# LINE 59 "RControlStationComm.chs" #-}


{- 
bool rcsc_getRoutePoints(int car, ROUTE_POINT *route, int *len,
                         int maxLen, int mapRoute, int timeoutMs);
bool rcsc_sendTerminalCmd(int car, char *cmd, char *reply, int timeoutMs);
-} 

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_connectTcp"
  rcscConnectTcp'_ :: ((C2HSImp.Ptr C2HSImp.CChar) -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-})))

foreign import ccall safe "RControlStationComm.chs.h rcsc_disconnectTcp"
  rcscDisconnectTcp'_ :: (IO ())

foreign import ccall safe "RControlStationComm.chs.h rcsc_setDebugLevel"
  rcscSetDebugLevel'_ :: (C2HSImp.CInt -> (IO ()))

foreign import ccall safe "RControlStationComm.chs.h rcsc_hasError"
  rcscHasError'_ :: (IO C2HSImp.CInt{-bool-})

foreign import ccall safe "RControlStationComm.chs.h rcsc_lastError"
  rcscLastError'_ :: (IO (C2HSImp.Ptr C2HSImp.CChar))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_getState"
  rcscGetState'_ :: (C2HSImp.CInt -> ((C2HSImp.Ptr ()) -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_getEnuRef"
  rcscGetEnuRef'_ :: (C2HSImp.CInt -> (C2HSImp.CInt{-bool-} -> ((C2HSImp.Ptr C2HSImp.CDouble) -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-})))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_setEnuRef"
  rcscSetEnuRef'_ :: (C2HSImp.CInt -> ((C2HSImp.Ptr C2HSImp.CDouble) -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_addRoutePoints"
  rcscAddRoutePoints'_ :: (C2HSImp.CInt -> ((C2HSImp.Ptr ()) -> (C2HSImp.CInt -> (C2HSImp.CInt{-bool-} -> (C2HSImp.CInt{-bool-} -> (C2HSImp.CInt -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_clearRoute"
  rcscClearRoute'_ :: (C2HSImp.CInt -> (C2HSImp.CInt -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_setAutopilotActive"
  rcscSetAutopilotActive'_ :: (C2HSImp.CInt -> (C2HSImp.CInt{-bool-} -> (C2HSImp.CInt -> (IO C2HSImp.CInt{-bool-}))))

foreign import ccall safe "RControlStationComm.chs.h __c2hs_wrapped__rcsc_rcControl"
  rcscRcControl'_ :: (C2HSImp.CInt -> (C2HSImp.CInt -> (C2HSImp.CDouble -> (C2HSImp.CDouble -> (IO C2HSImp.CInt{-bool-})))))
